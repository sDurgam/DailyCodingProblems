/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {
    
	static final String NULL_STRING = "null";

	// Encodes a tree to a single string.
	public String serialize(TreeNode root) {
		StringBuilder serializedDataBuilder = new StringBuilder();
		if (root == null) {
			return NULL_STRING;
		}
		appendNode(serializedDataBuilder, root);
		return serializedDataBuilder.toString();
	}

	public String appendNode(StringBuilder result, TreeNode root) {
		Queue<TreeNode> queue = new LinkedList<>();
		queue.add(root);
		while (!queue.isEmpty()) {
			TreeNode node = queue.poll();
			if (node == null) {
				result.append("null");
				result.append(",");
			} else {
				result.append(Integer.valueOf(node.val));
				result.append(",");
				queue.add(node.left);
				queue.add(node.right);
			}
		}
		int endIndex = 0;
       for(int i =result.length()-1; i >= 0; i--){
            if(result.charAt(i) >= '0' && result.charAt(i) <= '9'){
                   endIndex = i+1;
                   break;
            }
        }
		String r = result.substring(0, endIndex).toString();
		return r;
	}

	// Decodes your encoded data to tree.
	public TreeNode deserialize(String data) {
		if (data == null || data.length() == 0)
			return null;
		String[] dataSplit = data.split(",");
		TreeNode root = deserializeData(dataSplit);
		return root;
	}

	public TreeNode deserializeData(String[] data) {
  		List<TreeNode> nodesList = new ArrayList<TreeNode>();
		TreeNode root = null;
		int index = 0;
		while (index <= (data.length - 1) / 2) {
			TreeNode node = null;
			TreeNode left = null;
			TreeNode right = null;

			if (index < nodesList.size()) {
				node = nodesList.get(index);
			} else {
				if (!data[index].equals(NULL_STRING)) {
					node = new TreeNode(Integer.parseInt(data[index]));
				}
				nodesList.add(node);
			}

			if (((2 * index) + 1) < nodesList.size()) {
				left = nodesList.get((2 * index) + 1);
			} else {
				if (((2 * index) + 1 < data.length)) {
					if (!data[(2 * index) + 1].equals(NULL_STRING)) {
						left = new TreeNode(Integer.parseInt(data[(2 * index) + 1]));
                        nodesList.add(left);
					}
				}
			}

			if ((2 * index) + 2 < nodesList.size()) {
				right = nodesList.get((2 * index) + 2);
			} else {
				if (((2 * index) + 2 < data.length)) {
					if (!data[(2 * index) + 2].equals(NULL_STRING)) {
						right = new TreeNode(Integer.parseInt(data[(2 * index) + 2]));
                        nodesList.add(right);
					}
				}
			}
			if (root == null) {
				root = node;
			}

			if (node != null) {
				node.left = left;
				node.right = right;
			}
			index++;
		}
		return root;
	}
}